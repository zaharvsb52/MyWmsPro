<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxgcore="http://schemas.devexpress.com/winfx/2008/xaml/grid" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars" xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid" xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys" xmlns:dxght="http://schemas.devexpress.com/winfx/2008/xaml/grid/internal" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
    <dx:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <ControlTemplate x:Key="{dxgt:TableViewThemeKey ResourceKey=FixedNoneHeadersPanelTemplate}">
        <dx:StackVisibleIndexPanel dxg:GridColumn.HeaderPresenterType="Headers" ArrangeAccordingToVisibleIndex="True" Name="headersPanel" Orientation="Horizontal">
            <dx:DragManager.DropTargetFactory>
                <dxg:FixedNoneColumnHeaderDropTargetFactory />
            </dx:DragManager.DropTargetFactory>
        </dx:StackVisibleIndexPanel>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:TableViewThemeKey ResourceKey=FixedNoneDropPanelTemplate}">
        <dx:StackVisibleIndexPanel ArrangeAccordingToVisibleIndex="True" Orientation="Horizontal" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:TableViewThemeKey ResourceKey=FixedLeftHeadersPanelTemplate}">
        <dx:StackVisibleIndexPanel dxg:GridColumn.HeaderPresenterType="Headers" ArrangeAccordingToVisibleIndex="True" Name="fixedLeftHeadersPanel" Orientation="Horizontal">
            <dx:DragManager.DropTargetFactory>
                <dxg:FixedLeftColumnHeaderDropTargetFactory />
            </dx:DragManager.DropTargetFactory>
        </dx:StackVisibleIndexPanel>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:TableViewThemeKey ResourceKey=FixedLeftNoneDropPanelTemplate}">
        <dx:StackVisibleIndexPanel ArrangeAccordingToVisibleIndex="True" Orientation="Horizontal" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:TableViewThemeKey ResourceKey=FixedRightHeadersPanelTemplate}">
        <dx:StackVisibleIndexPanel dxg:GridColumn.HeaderPresenterType="Headers" ArrangeAccordingToVisibleIndex="True" Name="fixedRightHeadersPanel" Orientation="Horizontal">
            <dx:DragManager.DropTargetFactory>
                <dxg:FixedRightColumnHeaderDropTargetFactory />
            </dx:DragManager.DropTargetFactory>
        </dx:StackVisibleIndexPanel>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:TableViewThemeKey ResourceKey=FixedRightNoneDropPanelTemplate}">
        <dx:StackVisibleIndexPanel ArrangeAccordingToVisibleIndex="True" Orientation="Horizontal" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=RowDecorationTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>
    <DataTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=RowToolTipTemplate}">
        <dx:DXDockPanel LastChildFill="True">
            <dxe:ErrorControl Content="{Binding}" />
            <ContentPresenter VerticalAlignment="Center" Content="{Binding Path=ErrorContent}" />
        </dx:DXDockPanel>
    </DataTemplate>
    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=RowControlTemplate}">
        <ContentControl Template="{Binding Path=View.RowDecorationTemplate}">
            <dxg:GridRowContent x:Name="PART_DataRow" Style="{Binding Path=View.RowStyle}" MinHeight="{Binding Path=View.RowMinHeight}">
                <dx:DXDockPanel>
                    <dxg:RowIndicatorControl Width="{Binding Path=View.ActualIndicatorWidth}" Template="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=ItemTemplate}}" Visibility="{Binding Path=View.ActualShowIndicator, Converter={StaticResource BooleanToVisibilityConverter}}">
                    </dxg:RowIndicatorControl>
                    <dxg:DetailRowsIndentControl ItemsSource="{Binding Path=View.DataControl.OwnerDetailDescriptor.DetailViewIndents}" />
                    <ContentPresenter x:Name="PART_RowOffsetPresenter" />
                    <dxg:GridDetailExpandButtonContainer dx:FrameworkElementHelper.IsVisible="{Binding View.ActualShowDetailButtons}" />
                    <dx:DataContentPresenter x:Name="PART_DataRowContent" Content="{Binding}" ContentTemplateSelector="{Binding Path=View.ActualDataRowTemplateSelector}">
                        <dx:DataContentPresenter.Margin>
                            <Binding Path="View.ShowHorizontalLines">
                                <Binding.Converter>
                                    <dx:BoolToObjectConverter TrueValue="0,0,0,1" FalseValue="0,0,0,0" />
                                </Binding.Converter>
                            </Binding>
                        </dx:DataContentPresenter.Margin>
                        <ToolTipService.ToolTip>
                            <Binding Path="(dxgcore:RowData.CurrentRowData).(dxe:BaseEdit.HasValidationError)" RelativeSource="{RelativeSource TemplatedParent}">
                                <Binding.Converter>
                                    <dx:BoolToObjectConverter FalseValue="{x:Null}">
                                        <dx:BoolToObjectConverter.TrueValue>
                                            <ToolTip Name="toolTip" Content="{Binding Path=(dxgcore:RowData.CurrentRowData).(dxe:BaseEdit.ValidationError), RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowToolTipTemplate}}" />
                                        </dx:BoolToObjectConverter.TrueValue>
                                    </dx:BoolToObjectConverter>
                                </Binding.Converter>
                            </Binding>
                        </ToolTipService.ToolTip>
                        <!--ONLY SL
                        <dx:DataContentPresenter.HorizontalContentAlignment>
                            <HorizontalAlignment>Stretch</HorizontalAlignment>
                        </dx:DataContentPresenter.HorizontalContentAlignment>
                        ONLY SL-->
                        <!--ONLY SL
                        <dx:DataContentPresenter.VerticalContentAlignment>
                            <VerticalAlignment>Stretch</VerticalAlignment>
                        </dx:DataContentPresenter.VerticalContentAlignment>
                        ONLY SL-->
                    </dx:DataContentPresenter>
                </dx:DXDockPanel>
            </dxg:GridRowContent>
        </ContentControl>
    </ControlTemplate>
    <!--BEGIN WPF-->
    <SolidColorBrush x:Key="evenRowBrush" Color="#dde5f1" />
    <SolidColorBrush x:Key="oddRowBrush" Color="#FFFFFF" />
    
    <Style x:Key="{dxgt:GridRowThemeKey ResourceKey=RowStyle}" TargetType="{x:Type dxg:GridRowContent}">
        <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderNoneBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextUnfocusedBrush}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=SelectionState}" Value="Selected">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderSelectedBrush}}" />
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextRowSelectedBrush}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=SelectionState}" Value="Focused">
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextFocusedBrush}}" />
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderFocusedBrush}}" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=EvenRow}" Value="False"/>
                    <Condition Binding="{Binding Path=SelectionState}" Value="None"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource evenRowBrush}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=EvenRow}" Value="True"/>
                    <Condition Binding="{Binding Path=SelectionState}" Value="None"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource oddRowBrush}" />
            </MultiDataTrigger>
            
            
        </Style.Triggers>
    </Style>
    <!--END WPF-->
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.FixedDelimiter}" TargetType="{x:Type dxg:FixedDelimiter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ContentPresenter ContentTemplate="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=FixedColumnsDelimiterTemplate}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.RowsDelimiter}" TargetType="{x:Type dxg:RowsDelimiter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Background="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.FitRowContentPresenter}" TargetType="{x:Type dxg:FitRowContentPresenter}">
        <Setter Property="Template" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=FitColumnContentTemplate}}" />
    </Style>
    <DataTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=DataRowTemplate}">
        <dxg:GridScrollablePart x:Name="ScrollablePart" FixedColumnsDelimiterTemplate="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=FixedColumnsDelimiterTemplate}}" ScrollingMargin="{Binding Path=View.ScrollingVirtualizationMargin}" FixedNoneContentWidth="{Binding Path=FixedNoneContentWidth}" dxg:GridControl.CurrentView="{Binding Path=View}" FixedLeftVisibleColumns="{Binding Path=View.FixedLeftVisibleColumns}" FixedRightVisibleColumns="{Binding Path=View.FixedRightVisibleColumns}" FixedLineWidth="{Binding Path=View.FixedLineWidth}">
            <dxg:GridScrollablePart.FitContent>
                <dxg:FitRowContentPresenter Content="{Binding}" VerticalContentAlignment="Stretch" dxg:GridPopupMenu.GridMenuType="RowCell" dxb:BarManager.DXContextMenu="{Binding Path=View.DataControlMenu}" />
            </dxg:GridScrollablePart.FitContent>
            <dxg:GridScrollablePart.FixedLeftContent>
                <dxg:CellItemsControl dxg:GridControl.CurrentView="{Binding View}" ItemsSource="{Binding Path=FixedLeftCellData}" ItemsPanel="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=FixedLeftNoneDropPanelTemplate}}">
                </dxg:CellItemsControl>
            </dxg:GridScrollablePart.FixedLeftContent>
            <dxg:GridScrollablePart.FixedRightContent>
                <dxg:CellItemsControl dxg:GridControl.CurrentView="{Binding View}" ItemsSource="{Binding Path=FixedRightCellData}" ItemsPanel="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=FixedRightNoneDropPanelTemplate}}">
                </dxg:CellItemsControl>
            </dxg:GridScrollablePart.FixedRightContent>
            <dxg:GridScrollablePart.FixedNoneContent>
                <dxg:CellItemsControl dxg:GridControl.CurrentView="{Binding View}" ItemsSource="{Binding Path=FixedNoneCellData}" ItemsPanel="{DynamicResource {dxgt:TableViewThemeKey ResourceKey=FixedNoneDropPanelTemplate}}">
                </dxg:CellItemsControl>
            </dxg:GridScrollablePart.FixedNoneContent>
        </dxg:GridScrollablePart>
    </DataTemplate>

    <dx:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <ControlTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowControlTemplate}">
        <Grid x:Name="group" Visibility="{Binding IsRowVisible, Converter={StaticResource BoolToVisibilityConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <dxg:RowIndicatorControl Grid.Column="0" Template="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=GroupPresenterTemplate}}" Visibility="{Binding Path=View.ActualShowIndicator, Converter={StaticResource BooleanToVisibilityConverter}}" Width="{Binding Path=View.ActualIndicatorWidth}">
            </dxg:RowIndicatorControl>
            <dxg:DetailRowsIndentControl Grid.Column="1" ItemsSource="{Binding Path=View.DataControl.OwnerDetailDescriptor.DetailViewIndents}" />
            <dxg:GroupRowOffsetPresenter Grid.Column="2" />
            <ContentControl Grid.Column="3" Template="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowControlContainerTemplate}}">
                    <ContentControl Template="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowControlHeaderContentTemplate}}">
                        <dx:DoubleClicker CommandParameter="{Binding RowHandle.Value}" Command="{Binding View.Commands.ChangeGroupExpanded}" HorizontalContentAlignment="Stretch">
                            <dxg:GroupGridRowPresenter x:Name="PART_HeaderContentPresenter" dx:ExpandHelper.ExpandSpeed="{Binding Path=View.(dx:ExpandHelper.ExpandSpeed)}" ContentTemplateSelector="{Binding Path=View.ActualGroupRowTemplateSelector}" Content="{Binding}" Style="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowPresenterStyle}}" />
                        </dx:DoubleClicker>
                    </ContentControl>
            </ContentControl>
        </Grid>
    </ControlTemplate>
    <!--BEGIN WPF-->
    <ControlTemplate x:Key="{dxgt:CardViewThemeKey ResourceKey=GroupRowControlTemplate}">
        <Grid x:Name="group">
            <ContentControl Template="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=GroupRowControlContainerTemplate}}">
                <DockPanel>
                    <ContentControl x:Name="headerContainer" DockPanel.Dock="Top" Template="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=GroupRowControlHeaderContentTemplate}}">
                        <dx:DoubleClicker Command="{x:Static dxg:GridCommands.ChangeGroupExpanded}" CommandParameter="{Binding RowHandle.Value}">
                            <dxg:GroupGridRowPresenter x:Name="PART_HeaderContentPresenter" dx:ExpandHelper.ExpandSpeed="{Binding Path=View.(dx:ExpandHelper.ExpandSpeed)}" ContentTemplateSelector="{Binding Path=View.ActualGroupRowTemplateSelector}" Content="{Binding}" />
                        </dx:DoubleClicker>
                    </ContentControl>
                    <dx:DXExpander AllowAddingEvent="True" DockPanel.Dock="Top" Style="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=GroupRowControlExpanderVerticalStyle}}" Name="Expander">
                        <!--<dx:DXExpander.AnimationProgress>
                            <Binding Path="IsExpanded">
                                <Binding.Converter>
                                    <dx:BoolToObjectConverter TrueValue="1" FalseValue="0"/>
                                </Binding.Converter>
                            </Binding>
                        </dx:DXExpander.AnimationProgress>-->
                        <dxg:CardItemsContainer x:Name="PART_ItemsContainer" HorizontalAlignment="Stretch" Content="{Binding Path=RowsContainer}" />
                    </dx:DXExpander>
                </DockPanel>
            </ContentControl>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal">
                <Setter Property="VerticalAlignment" Value="Stretch" TargetName="PART_ItemsContainer" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="DockPanel.Dock" Value="Left" TargetName="headerContainer" />
                <Setter Property="DockPanel.Dock" Value="Left" TargetName="Expander" />
                <Setter Property="Style" Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=GroupRowControlExpanderHorizontalStyle}}" TargetName="Expander" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--END WPF-->
    <Style x:Key="{dxgt:GridRowThemeKey ResourceKey=CellStyle}" TargetType="{x:Type dxgcore:CellContentPresenter}">
        <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellBorderNoneBrush}}" />
        <Style.Triggers>
            <Trigger Property="SelectionState" Value="Selected">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderSelectedBrush}}" />
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextRowSelectedBrush}}" />
            </Trigger>
            <Trigger Property="SelectionState" Value="Focused">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellBorderFocusedBrush}}" />
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellTextFocusedBrush}}" />
            </Trigger>
            <Trigger Property="SelectionState" Value="FocusedAndSelected">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderFocusedBrush}}" />
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextFocusedBrush}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="{dxgt:GridControlThemeKey ResourceKey=GroupPanelCaptionTemplate}" TargetType="dxg:GroupPanelCaptionControl">
        <ContentPresenter />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:GridControlThemeKey ResourceKey=DetailHeaderControlTemplate}" TargetType="dxg:DetailHeaderControl">
        <dxg:DetailRowsContentControl View="{Binding Path=MasterRowData.View, RelativeSource={RelativeSource TemplatedParent}}" DetailDescriptor="{Binding Path=DetailDescriptor, RelativeSource={RelativeSource TemplatedParent}}">
            <dxg:DetailDescriptorContentBorder>
                    <dxg:DetailRowContentPresenter MasterRowData="{TemplateBinding MasterRowData}" Content="{Binding DetailDescriptor.HeaderContent, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{Binding DetailDescriptor.HeaderContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
            </dxg:DetailDescriptorContentBorder>
        </dxg:DetailRowsContentControl>
    </ControlTemplate>
</ResourceDictionary>